/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { KafkaEvent } from "./KafkaEvent";
import { KafkaEventCountArgs } from "./KafkaEventCountArgs";
import { KafkaEventFindManyArgs } from "./KafkaEventFindManyArgs";
import { KafkaEventFindUniqueArgs } from "./KafkaEventFindUniqueArgs";
import { CreateKafkaEventArgs } from "./CreateKafkaEventArgs";
import { UpdateKafkaEventArgs } from "./UpdateKafkaEventArgs";
import { DeleteKafkaEventArgs } from "./DeleteKafkaEventArgs";
import { KafkaEventService } from "../kafkaEvent.service";
@graphql.Resolver(() => KafkaEvent)
export class KafkaEventResolverBase {
  constructor(protected readonly service: KafkaEventService) {}

  async _kafkaEventsMeta(
    @graphql.Args() args: KafkaEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [KafkaEvent])
  async kafkaEvents(
    @graphql.Args() args: KafkaEventFindManyArgs
  ): Promise<KafkaEvent[]> {
    return this.service.kafkaEvents(args);
  }

  @graphql.Query(() => KafkaEvent, { nullable: true })
  async kafkaEvent(
    @graphql.Args() args: KafkaEventFindUniqueArgs
  ): Promise<KafkaEvent | null> {
    const result = await this.service.kafkaEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KafkaEvent)
  async createKafkaEvent(
    @graphql.Args() args: CreateKafkaEventArgs
  ): Promise<KafkaEvent> {
    return await this.service.createKafkaEvent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => KafkaEvent)
  async updateKafkaEvent(
    @graphql.Args() args: UpdateKafkaEventArgs
  ): Promise<KafkaEvent | null> {
    try {
      return await this.service.updateKafkaEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KafkaEvent)
  async deleteKafkaEvent(
    @graphql.Args() args: DeleteKafkaEventArgs
  ): Promise<KafkaEvent | null> {
    try {
      return await this.service.deleteKafkaEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
