/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KafkaEventService } from "../kafkaEvent.service";
import { KafkaEventCreateInput } from "./KafkaEventCreateInput";
import { KafkaEvent } from "./KafkaEvent";
import { KafkaEventFindManyArgs } from "./KafkaEventFindManyArgs";
import { KafkaEventWhereUniqueInput } from "./KafkaEventWhereUniqueInput";
import { KafkaEventUpdateInput } from "./KafkaEventUpdateInput";

export class KafkaEventControllerBase {
  constructor(protected readonly service: KafkaEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: KafkaEvent })
  async createKafkaEvent(
    @common.Body() data: KafkaEventCreateInput
  ): Promise<KafkaEvent> {
    return await this.service.createKafkaEvent({
      data: data,
      select: {
        createdAt: true,
        eventType: true,
        id: true,
        payload: true,
        receivedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [KafkaEvent] })
  @ApiNestedQuery(KafkaEventFindManyArgs)
  async kafkaEvents(@common.Req() request: Request): Promise<KafkaEvent[]> {
    const args = plainToClass(KafkaEventFindManyArgs, request.query);
    return this.service.kafkaEvents({
      ...args,
      select: {
        createdAt: true,
        eventType: true,
        id: true,
        payload: true,
        receivedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: KafkaEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async kafkaEvent(
    @common.Param() params: KafkaEventWhereUniqueInput
  ): Promise<KafkaEvent | null> {
    const result = await this.service.kafkaEvent({
      where: params,
      select: {
        createdAt: true,
        eventType: true,
        id: true,
        payload: true,
        receivedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: KafkaEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKafkaEvent(
    @common.Param() params: KafkaEventWhereUniqueInput,
    @common.Body() data: KafkaEventUpdateInput
  ): Promise<KafkaEvent | null> {
    try {
      return await this.service.updateKafkaEvent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventType: true,
          id: true,
          payload: true,
          receivedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: KafkaEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKafkaEvent(
    @common.Param() params: KafkaEventWhereUniqueInput
  ): Promise<KafkaEvent | null> {
    try {
      return await this.service.deleteKafkaEvent({
        where: params,
        select: {
          createdAt: true,
          eventType: true,
          id: true,
          payload: true,
          receivedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
