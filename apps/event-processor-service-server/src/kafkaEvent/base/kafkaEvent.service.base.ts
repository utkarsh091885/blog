/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, KafkaEvent as PrismaKafkaEvent } from "@prisma/client";

export class KafkaEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KafkaEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.kafkaEvent.count(args);
  }

  async kafkaEvents(
    args: Prisma.KafkaEventFindManyArgs
  ): Promise<PrismaKafkaEvent[]> {
    return this.prisma.kafkaEvent.findMany(args);
  }
  async kafkaEvent(
    args: Prisma.KafkaEventFindUniqueArgs
  ): Promise<PrismaKafkaEvent | null> {
    return this.prisma.kafkaEvent.findUnique(args);
  }
  async createKafkaEvent(
    args: Prisma.KafkaEventCreateArgs
  ): Promise<PrismaKafkaEvent> {
    return this.prisma.kafkaEvent.create(args);
  }
  async updateKafkaEvent(
    args: Prisma.KafkaEventUpdateArgs
  ): Promise<PrismaKafkaEvent> {
    return this.prisma.kafkaEvent.update(args);
  }
  async deleteKafkaEvent(
    args: Prisma.KafkaEventDeleteArgs
  ): Promise<PrismaKafkaEvent> {
    return this.prisma.kafkaEvent.delete(args);
  }
}
